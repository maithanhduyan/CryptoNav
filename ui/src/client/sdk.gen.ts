// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { RootGetData, HealthCheckHealthGetData, RegisterUserUsersRegisterPostData, RegisterUserUsersRegisterPostError, LoginUsersLoginPostData, LoginUsersLoginPostError, ReadCurrentUserUsersMeGetData, GetItemsItemsGetData, GetItemsItemsGetResponse, CreateItemItemsPostData, CreateItemItemsPostResponse, CreateItemItemsPostError, DeleteItemItemsItemIdDeleteData, DeleteItemItemsItemIdDeleteResponse, DeleteItemItemsItemIdDeleteError, ReadItemItemsItemIdGetData, ReadItemItemsItemIdGetResponse, ReadItemItemsItemIdGetError, UpdateItemItemsItemIdPutData, UpdateItemItemsItemIdPutError, ReadAssetsAssetsGetData, ReadAssetsAssetsGetResponse, ReadAssetsAssetsGetError, CreateAssetAssetsPostData, CreateAssetAssetsPostResponse, CreateAssetAssetsPostError, ReadAssetAssetsAssetIdGetData, ReadAssetAssetsAssetIdGetResponse, ReadAssetAssetsAssetIdGetError, CreatePortfolioPortfoliosPostData, CreatePortfolioPortfoliosPostResponse, CreatePortfolioPortfoliosPostError, ReadPortfolioPortfoliosPortfolioIdGetData, ReadPortfolioPortfoliosPortfolioIdGetResponse, ReadPortfolioPortfoliosPortfolioIdGetError, ReadUserPortfoliosPortfoliosUserUserIdGetData, ReadUserPortfoliosPortfoliosUserUserIdGetResponse, ReadUserPortfoliosPortfoliosUserUserIdGetError, CreateTransactionTransactionsPostData, CreateTransactionTransactionsPostResponse, CreateTransactionTransactionsPostError, ReadTransactionTransactionsTransactionIdGetData, ReadTransactionTransactionsTransactionIdGetResponse, ReadTransactionTransactionsTransactionIdGetError, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetData, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponse, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Register User
 */
export const registerUserUsersRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserUsersRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, RegisterUserUsersRegisterPostError, ThrowOnError>({
        url: '/users/register',
        ...options
    });
};

/**
 * Login
 */
export const loginUsersLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginUsersLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, LoginUsersLoginPostError, ThrowOnError>({
        url: '/users/login',
        ...options
    });
};

/**
 * Read Current User
 */
export const readCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCurrentUserUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Get Items
 */
export const getItemsItemsGet = <ThrowOnError extends boolean = false>(options?: Options<GetItemsItemsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemsItemsGetResponse, unknown, ThrowOnError>({
        url: '/items/',
        ...options
    });
};

/**
 * Create Item
 */
export const createItemItemsPost = <ThrowOnError extends boolean = false>(options: Options<CreateItemItemsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateItemItemsPostResponse, CreateItemItemsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Item
 */
export const deleteItemItemsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteItemItemsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemItemsItemIdDeleteResponse, DeleteItemItemsItemIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/{item_id}',
        ...options
    });
};

/**
 * Read Item
 */
export const readItemItemsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadItemItemsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadItemItemsItemIdGetResponse, ReadItemItemsItemIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/{item_id}',
        ...options
    });
};

/**
 * Update Item
 */
export const updateItemItemsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateItemItemsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateItemItemsItemIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/{item_id}',
        ...options
    });
};

/**
 * Read Assets
 */
export const readAssetsAssetsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadAssetsAssetsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadAssetsAssetsGetResponse, ReadAssetsAssetsGetError, ThrowOnError>({
        url: '/assets/',
        ...options
    });
};

/**
 * Create Asset
 */
export const createAssetAssetsPost = <ThrowOnError extends boolean = false>(options: Options<CreateAssetAssetsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssetAssetsPostResponse, CreateAssetAssetsPostError, ThrowOnError>({
        url: '/assets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Asset
 */
export const readAssetAssetsAssetIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadAssetAssetsAssetIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadAssetAssetsAssetIdGetResponse, ReadAssetAssetsAssetIdGetError, ThrowOnError>({
        url: '/assets/{asset_id}',
        ...options
    });
};

/**
 * Create Portfolio
 */
export const createPortfolioPortfoliosPost = <ThrowOnError extends boolean = false>(options: Options<CreatePortfolioPortfoliosPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePortfolioPortfoliosPostResponse, CreatePortfolioPortfoliosPostError, ThrowOnError>({
        url: '/portfolios/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Portfolio
 */
export const readPortfolioPortfoliosPortfolioIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPortfolioPortfoliosPortfolioIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadPortfolioPortfoliosPortfolioIdGetResponse, ReadPortfolioPortfoliosPortfolioIdGetError, ThrowOnError>({
        url: '/portfolios/{portfolio_id}',
        ...options
    });
};

/**
 * Read User Portfolios
 */
export const readUserPortfoliosPortfoliosUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUserPortfoliosPortfoliosUserUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadUserPortfoliosPortfoliosUserUserIdGetResponse, ReadUserPortfoliosPortfoliosUserUserIdGetError, ThrowOnError>({
        url: '/portfolios/user/{user_id}',
        ...options
    });
};

/**
 * Create Transaction
 */
export const createTransactionTransactionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTransactionTransactionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTransactionTransactionsPostResponse, CreateTransactionTransactionsPostError, ThrowOnError>({
        url: '/transactions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Transaction
 */
export const readTransactionTransactionsTransactionIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTransactionTransactionsTransactionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadTransactionTransactionsTransactionIdGetResponse, ReadTransactionTransactionsTransactionIdGetError, ThrowOnError>({
        url: '/transactions/{transaction_id}',
        ...options
    });
};

/**
 * Transactions By Portfolio
 */
export const transactionsByPortfolioTransactionsPortfolioPortfolioIdGet = <ThrowOnError extends boolean = false>(options: Options<TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponse, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetError, ThrowOnError>({
        url: '/transactions/portfolio/{portfolio_id}',
        ...options
    });
};