// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { RootGetData, HealthCheckHealthGetData, RegisterUserUsersRegisterPostData, RegisterUserUsersRegisterPostResponse, RegisterUserUsersRegisterPostError, LoginUsersLoginPostData, LoginUsersLoginPostError, DeleteUserUsersMeDeleteData, DeleteUserUsersMeDeleteResponse, ReadCurrentUserUsersMeGetData, ReadCurrentUserUsersMeGetResponse, UpdateUserUsersMePutData, UpdateUserUsersMePutResponse, UpdateUserUsersMePutError, ReadUsersUsersGetData, ReadUsersUsersGetResponse, ReadUsersUsersGetError, ReadUserUsersUserIdGetData, ReadUserUsersUserIdGetResponse, ReadUserUsersUserIdGetError, ReadAssetsAssetsGetData, ReadAssetsAssetsGetResponse, ReadAssetsAssetsGetError, CreateAssetAssetsPostData, CreateAssetAssetsPostResponse, CreateAssetAssetsPostError, DeleteAssetAssetsAssetIdDeleteData, DeleteAssetAssetsAssetIdDeleteResponse, DeleteAssetAssetsAssetIdDeleteError, ReadAssetAssetsAssetIdGetData, ReadAssetAssetsAssetIdGetResponse, ReadAssetAssetsAssetIdGetError, UpdateAssetAssetsAssetIdPutData, UpdateAssetAssetsAssetIdPutResponse, UpdateAssetAssetsAssetIdPutError, ReadPriceHistoryAssetsAssetIdPriceHistoryGetData, ReadPriceHistoryAssetsAssetIdPriceHistoryGetResponse, ReadPriceHistoryAssetsAssetIdPriceHistoryGetError, CreatePortfolioPortfoliosPostData, CreatePortfolioPortfoliosPostResponse, CreatePortfolioPortfoliosPostError, DeletePortfolioPortfoliosPortfolioIdDeleteData, DeletePortfolioPortfoliosPortfolioIdDeleteResponse, DeletePortfolioPortfoliosPortfolioIdDeleteError, ReadPortfolioPortfoliosPortfolioIdGetData, ReadPortfolioPortfoliosPortfolioIdGetResponse, ReadPortfolioPortfoliosPortfolioIdGetError, UpdatePortfolioPortfoliosPortfolioIdPutData, UpdatePortfolioPortfoliosPortfolioIdPutResponse, UpdatePortfolioPortfoliosPortfolioIdPutError, ReadUserPortfoliosPortfoliosMyPortfoliosGetData, ReadUserPortfoliosPortfoliosMyPortfoliosGetResponse, CreateTransactionTransactionsPostData, CreateTransactionTransactionsPostResponse, CreateTransactionTransactionsPostError, DeleteTransactionTransactionsTransactionIdDeleteData, DeleteTransactionTransactionsTransactionIdDeleteResponse, DeleteTransactionTransactionsTransactionIdDeleteError, ReadTransactionTransactionsTransactionIdGetData, ReadTransactionTransactionsTransactionIdGetResponse, ReadTransactionTransactionsTransactionIdGetError, UpdateTransactionTransactionsTransactionIdPutData, UpdateTransactionTransactionsTransactionIdPutResponse, UpdateTransactionTransactionsTransactionIdPutError, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetData, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponse, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Register User
 */
export const registerUserUsersRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserUsersRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserUsersRegisterPostResponse, RegisterUserUsersRegisterPostError, ThrowOnError>({
        url: '/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login
 */
export const loginUsersLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginUsersLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, LoginUsersLoginPostError, ThrowOnError>({
        url: '/users/login',
        ...options
    });
};

/**
 * Delete User
 */
export const deleteUserUsersMeDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserUsersMeDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserUsersMeDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Read Current User
 */
export const readCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCurrentUserUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadCurrentUserUsersMeGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Update User
 */
export const updateUserUsersMePut = <ThrowOnError extends boolean = false>(options?: Options<UpdateUserUsersMePutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateUserUsersMePutResponse, UpdateUserUsersMePutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Read Users
 */
export const readUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUsersUsersGetResponse, ReadUsersUsersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Read User
 */
export const readUserUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUserUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadUserUsersUserIdGetResponse, ReadUserUsersUserIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Read Assets
 */
export const readAssetsAssetsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadAssetsAssetsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadAssetsAssetsGetResponse, ReadAssetsAssetsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/',
        ...options
    });
};

/**
 * Create Asset
 */
export const createAssetAssetsPost = <ThrowOnError extends boolean = false>(options: Options<CreateAssetAssetsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssetAssetsPostResponse, CreateAssetAssetsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Asset
 */
export const deleteAssetAssetsAssetIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetAssetsAssetIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssetAssetsAssetIdDeleteResponse, DeleteAssetAssetsAssetIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/{asset_id}',
        ...options
    });
};

/**
 * Read Asset
 */
export const readAssetAssetsAssetIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadAssetAssetsAssetIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadAssetAssetsAssetIdGetResponse, ReadAssetAssetsAssetIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/{asset_id}',
        ...options
    });
};

/**
 * Update Asset
 */
export const updateAssetAssetsAssetIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateAssetAssetsAssetIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAssetAssetsAssetIdPutResponse, UpdateAssetAssetsAssetIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/{asset_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Price History
 */
export const readPriceHistoryAssetsAssetIdPriceHistoryGet = <ThrowOnError extends boolean = false>(options: Options<ReadPriceHistoryAssetsAssetIdPriceHistoryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadPriceHistoryAssetsAssetIdPriceHistoryGetResponse, ReadPriceHistoryAssetsAssetIdPriceHistoryGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/assets/{asset_id}/price-history',
        ...options
    });
};

/**
 * Create Portfolio
 */
export const createPortfolioPortfoliosPost = <ThrowOnError extends boolean = false>(options: Options<CreatePortfolioPortfoliosPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePortfolioPortfoliosPostResponse, CreatePortfolioPortfoliosPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/portfolios/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Portfolio
 */
export const deletePortfolioPortfoliosPortfolioIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePortfolioPortfoliosPortfolioIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePortfolioPortfoliosPortfolioIdDeleteResponse, DeletePortfolioPortfoliosPortfolioIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/portfolios/{portfolio_id}',
        ...options
    });
};

/**
 * Read Portfolio
 */
export const readPortfolioPortfoliosPortfolioIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPortfolioPortfoliosPortfolioIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadPortfolioPortfoliosPortfolioIdGetResponse, ReadPortfolioPortfoliosPortfolioIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/portfolios/{portfolio_id}',
        ...options
    });
};

/**
 * Update Portfolio
 */
export const updatePortfolioPortfoliosPortfolioIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePortfolioPortfoliosPortfolioIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePortfolioPortfoliosPortfolioIdPutResponse, UpdatePortfolioPortfoliosPortfolioIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/portfolios/{portfolio_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read User Portfolios
 */
export const readUserPortfoliosPortfoliosMyPortfoliosGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUserPortfoliosPortfoliosMyPortfoliosGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUserPortfoliosPortfoliosMyPortfoliosGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/portfolios/my-portfolios',
        ...options
    });
};

/**
 * Create Transaction
 */
export const createTransactionTransactionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTransactionTransactionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTransactionTransactionsPostResponse, CreateTransactionTransactionsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/transactions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Transaction
 */
export const deleteTransactionTransactionsTransactionIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTransactionTransactionsTransactionIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTransactionTransactionsTransactionIdDeleteResponse, DeleteTransactionTransactionsTransactionIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/transactions/{transaction_id}',
        ...options
    });
};

/**
 * Read Transaction
 */
export const readTransactionTransactionsTransactionIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTransactionTransactionsTransactionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadTransactionTransactionsTransactionIdGetResponse, ReadTransactionTransactionsTransactionIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/transactions/{transaction_id}',
        ...options
    });
};

/**
 * Update Transaction
 */
export const updateTransactionTransactionsTransactionIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTransactionTransactionsTransactionIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTransactionTransactionsTransactionIdPutResponse, UpdateTransactionTransactionsTransactionIdPutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/transactions/{transaction_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transactions By Portfolio
 */
export const transactionsByPortfolioTransactionsPortfolioPortfolioIdGet = <ThrowOnError extends boolean = false>(options: Options<TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponse, TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/transactions/portfolio/{portfolio_id}',
        ...options
    });
};