// This file is auto-generated by @hey-api/openapi-ts

export type AssetCreate = {
    symbol: string;
    name: string;
    description?: string | null;
};

export type AssetResponse = {
    symbol: string;
    name: string;
    description?: string | null;
    id: number;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: string | null;
};

export type ItemResponse = {
    title: string;
    description?: string | null;
    id: number;
    owner_id: number;
};

export type PortfolioCreate = {
    name: string;
    description?: string | null;
    user_id: number;
};

export type PortfolioResponse = {
    name: string;
    description?: string | null;
    id: number;
    user_id: number;
    created_at: string;
};

export type TransactionCreate = {
    portfolio_id: number;
    asset_id: number;
    quantity: number;
    price: number;
    transaction_type: string;
    transaction_date?: string | null;
};

export type TransactionResponse = {
    portfolio_id: number;
    asset_id: number;
    quantity: number;
    price: number;
    transaction_type: string;
    transaction_date?: string | null;
    id: number;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterUserUsersRegisterPostData = {
    body?: never;
    path?: never;
    query: {
        username: string;
        email: string;
        password: string;
    };
    url: '/users/register';
};

export type RegisterUserUsersRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserUsersRegisterPostError = RegisterUserUsersRegisterPostErrors[keyof RegisterUserUsersRegisterPostErrors];

export type RegisterUserUsersRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: unknown;
};

export type LoginUsersLoginPostData = {
    body?: never;
    path?: never;
    query: {
        username: string;
        password: string;
    };
    url: '/users/login';
};

export type LoginUsersLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginUsersLoginPostError = LoginUsersLoginPostErrors[keyof LoginUsersLoginPostErrors];

export type LoginUsersLoginPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadCurrentUserUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type ReadCurrentUserUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetItemsItemsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/items/';
};

export type GetItemsItemsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ItemResponse>;
};

export type GetItemsItemsGetResponse = GetItemsItemsGetResponses[keyof GetItemsItemsGetResponses];

export type CreateItemItemsPostData = {
    body: ItemCreate;
    path?: never;
    query?: never;
    url: '/items/';
};

export type CreateItemItemsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateItemItemsPostError = CreateItemItemsPostErrors[keyof CreateItemItemsPostErrors];

export type CreateItemItemsPostResponses = {
    /**
     * Successful Response
     */
    201: ItemResponse;
};

export type CreateItemItemsPostResponse = CreateItemItemsPostResponses[keyof CreateItemItemsPostResponses];

export type DeleteItemItemsItemIdDeleteData = {
    body?: never;
    path: {
        item_id: number;
    };
    query?: never;
    url: '/items/{item_id}';
};

export type DeleteItemItemsItemIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemItemsItemIdDeleteError = DeleteItemItemsItemIdDeleteErrors[keyof DeleteItemItemsItemIdDeleteErrors];

export type DeleteItemItemsItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteItemItemsItemIdDeleteResponse = DeleteItemItemsItemIdDeleteResponses[keyof DeleteItemItemsItemIdDeleteResponses];

export type ReadItemItemsItemIdGetData = {
    body?: never;
    path: {
        item_id: number;
    };
    query?: never;
    url: '/items/{item_id}';
};

export type ReadItemItemsItemIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadItemItemsItemIdGetError = ReadItemItemsItemIdGetErrors[keyof ReadItemItemsItemIdGetErrors];

export type ReadItemItemsItemIdGetResponses = {
    /**
     * Successful Response
     */
    200: ItemResponse;
};

export type ReadItemItemsItemIdGetResponse = ReadItemItemsItemIdGetResponses[keyof ReadItemItemsItemIdGetResponses];

export type UpdateItemItemsItemIdPutData = {
    body?: never;
    path: {
        item_id: number;
    };
    query?: {
        title?: string;
        description?: string;
    };
    url: '/items/{item_id}';
};

export type UpdateItemItemsItemIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateItemItemsItemIdPutError = UpdateItemItemsItemIdPutErrors[keyof UpdateItemItemsItemIdPutErrors];

export type UpdateItemItemsItemIdPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadAssetsAssetsGetData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/assets/';
};

export type ReadAssetsAssetsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadAssetsAssetsGetError = ReadAssetsAssetsGetErrors[keyof ReadAssetsAssetsGetErrors];

export type ReadAssetsAssetsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<AssetResponse>;
};

export type ReadAssetsAssetsGetResponse = ReadAssetsAssetsGetResponses[keyof ReadAssetsAssetsGetResponses];

export type CreateAssetAssetsPostData = {
    body: AssetCreate;
    path?: never;
    query?: never;
    url: '/assets/';
};

export type CreateAssetAssetsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateAssetAssetsPostError = CreateAssetAssetsPostErrors[keyof CreateAssetAssetsPostErrors];

export type CreateAssetAssetsPostResponses = {
    /**
     * Successful Response
     */
    200: AssetResponse;
};

export type CreateAssetAssetsPostResponse = CreateAssetAssetsPostResponses[keyof CreateAssetAssetsPostResponses];

export type ReadAssetAssetsAssetIdGetData = {
    body?: never;
    path: {
        asset_id: number;
    };
    query?: never;
    url: '/assets/{asset_id}';
};

export type ReadAssetAssetsAssetIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadAssetAssetsAssetIdGetError = ReadAssetAssetsAssetIdGetErrors[keyof ReadAssetAssetsAssetIdGetErrors];

export type ReadAssetAssetsAssetIdGetResponses = {
    /**
     * Successful Response
     */
    200: AssetResponse;
};

export type ReadAssetAssetsAssetIdGetResponse = ReadAssetAssetsAssetIdGetResponses[keyof ReadAssetAssetsAssetIdGetResponses];

export type CreatePortfolioPortfoliosPostData = {
    body: PortfolioCreate;
    path?: never;
    query?: never;
    url: '/portfolios/';
};

export type CreatePortfolioPortfoliosPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePortfolioPortfoliosPostError = CreatePortfolioPortfoliosPostErrors[keyof CreatePortfolioPortfoliosPostErrors];

export type CreatePortfolioPortfoliosPostResponses = {
    /**
     * Successful Response
     */
    200: PortfolioResponse;
};

export type CreatePortfolioPortfoliosPostResponse = CreatePortfolioPortfoliosPostResponses[keyof CreatePortfolioPortfoliosPostResponses];

export type ReadPortfolioPortfoliosPortfolioIdGetData = {
    body?: never;
    path: {
        portfolio_id: number;
    };
    query?: never;
    url: '/portfolios/{portfolio_id}';
};

export type ReadPortfolioPortfoliosPortfolioIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadPortfolioPortfoliosPortfolioIdGetError = ReadPortfolioPortfoliosPortfolioIdGetErrors[keyof ReadPortfolioPortfoliosPortfolioIdGetErrors];

export type ReadPortfolioPortfoliosPortfolioIdGetResponses = {
    /**
     * Successful Response
     */
    200: PortfolioResponse;
};

export type ReadPortfolioPortfoliosPortfolioIdGetResponse = ReadPortfolioPortfoliosPortfolioIdGetResponses[keyof ReadPortfolioPortfoliosPortfolioIdGetResponses];

export type ReadUserPortfoliosPortfoliosUserUserIdGetData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/portfolios/user/{user_id}';
};

export type ReadUserPortfoliosPortfoliosUserUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUserPortfoliosPortfoliosUserUserIdGetError = ReadUserPortfoliosPortfoliosUserUserIdGetErrors[keyof ReadUserPortfoliosPortfoliosUserUserIdGetErrors];

export type ReadUserPortfoliosPortfoliosUserUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PortfolioResponse>;
};

export type ReadUserPortfoliosPortfoliosUserUserIdGetResponse = ReadUserPortfoliosPortfoliosUserUserIdGetResponses[keyof ReadUserPortfoliosPortfoliosUserUserIdGetResponses];

export type CreateTransactionTransactionsPostData = {
    body: TransactionCreate;
    path?: never;
    query?: never;
    url: '/transactions/';
};

export type CreateTransactionTransactionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTransactionTransactionsPostError = CreateTransactionTransactionsPostErrors[keyof CreateTransactionTransactionsPostErrors];

export type CreateTransactionTransactionsPostResponses = {
    /**
     * Successful Response
     */
    200: TransactionResponse;
};

export type CreateTransactionTransactionsPostResponse = CreateTransactionTransactionsPostResponses[keyof CreateTransactionTransactionsPostResponses];

export type ReadTransactionTransactionsTransactionIdGetData = {
    body?: never;
    path: {
        transaction_id: number;
    };
    query?: never;
    url: '/transactions/{transaction_id}';
};

export type ReadTransactionTransactionsTransactionIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTransactionTransactionsTransactionIdGetError = ReadTransactionTransactionsTransactionIdGetErrors[keyof ReadTransactionTransactionsTransactionIdGetErrors];

export type ReadTransactionTransactionsTransactionIdGetResponses = {
    /**
     * Successful Response
     */
    200: TransactionResponse;
};

export type ReadTransactionTransactionsTransactionIdGetResponse = ReadTransactionTransactionsTransactionIdGetResponses[keyof ReadTransactionTransactionsTransactionIdGetResponses];

export type TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetData = {
    body?: never;
    path: {
        portfolio_id: number;
    };
    query?: never;
    url: '/transactions/portfolio/{portfolio_id}';
};

export type TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetError = TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetErrors[keyof TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetErrors];

export type TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<TransactionResponse>;
};

export type TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponse = TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponses[keyof TransactionsByPortfolioTransactionsPortfolioPortfolioIdGetResponses];

export type ClientOptions = {
    baseUrl: 'http://cryptonav.local' | (string & {});
};